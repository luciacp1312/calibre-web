# Generated by Selenium IDE
import pytest
import time
import random, string
from selenium import webdriver
#from selenium.webdriver.chrome.service import Service
#from selenium.webdriver.chrome.options import Options
#from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
#from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
#from selenium.webdriver.common.keys import Keys
#from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestDefaultSuite():
  def setup_method(self): #, method
    #chrome_options = Options()
    self.driver = webdriver.Chrome()
    #chrome_options.add_argument("user-data-dir=C:/Users/Usuario/AppData/Local/Google/Chrome/User Data")
    #chrome_options.add_argument("profile-directory=Profile 2")
    #self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
    self.vars = {}
  
  def teardown_method(self): #, method
    self.driver.quit()
  
  ############################## TESTS LOGIN ##############################
  
  def test_login(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
  
  
  ############################## TESTS RECOMENDADOR ##############################
  
  def test_recomendador(self):
    # Arrange: iniciar sesión
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.set_window_size(974, 1031)
    self.driver.find_element(By.LINK_TEXT, "Recomendador").click()
    
    # Comprueba si aparece el botón "Volver a realizar el test"
    try:
        volver_boton = self.driver.find_element(By.LINK_TEXT, "Volver a realizar el test")
        volver_boton.click()
    except:
        pass

    # Rellenar el formulario
    
    for i in range(1, 11):
        self.driver.find_element(By.NAME, f"question_{i}").click()
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()

    WebDriverWait(self.driver, 10).until(
      EC.presence_of_element_located((By.LINK_TEXT, "Volver a realizar el test"))
    )
    volver_boton = self.driver.find_element(By.LINK_TEXT, "Volver a realizar el test")
    assert volver_boton is not None
    
  
  ############################## TESTS FORO ##############################
  
  def generate_unique_suffix(self):
    #Genera un sufijo único aleatorio.
    return ''.join(random.choices(string.ascii_letters + string.digits, k=10))
  
  
  def test_agregar_foro(self):
    # Se debe iniciar sesión primero
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
      
    unique_name = f"foro prueba {self.generate_unique_suffix()}"
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1031)
    self.driver.find_element(By.LINK_TEXT, "Foro").click()
    self.driver.find_element(By.LINK_TEXT, "Agregar Foro").click()
    
    # Llenar el formulario
    self.driver.find_element(By.ID, "name").click()
    self.driver.find_element(By.ID, "name").send_keys(unique_name)
    self.driver.find_element(By.ID, "description").send_keys("Descripción del foro prueba")
    self.driver.find_element(By.ID, "category_id").click()
    dropdown = self.driver.find_element(By.ID, "category_id")
    dropdown.find_element(By.XPATH, "//option[. = 'prueba']").click()
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
    
    # Esperar y verificar el mensaje de éxito
    WebDriverWait(self.driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, ".alert-success"))
    )
    success_message = self.driver.find_element(By.CSS_SELECTOR, ".alert-success")
    assert "¡Foro agregado con éxito!" in success_message.text
 
  def test_borrar_foro(self):
    # Se debe iniciar sesión primero
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.LINK_TEXT, "Foro").click()
    
    WebDriverWait(self.driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "table"))
    )
        
    try:
        # Verificar si hay al menos 2 filas en la tabla de foros
        rows = self.driver.find_elements(By.CSS_SELECTOR, "tr")
        if len(rows) < 3:  # La primera fila es el encabezado, por eso 3
            pytest.skip("No hay suficientes foros para borrar.")
            
        delete_button = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(2) form > .btn")
        delete_button.click()
            
        WebDriverWait(self.driver, 10).until(EC.alert_is_present())
        alert = self.driver.switch_to.alert
        alert.accept()
        
        WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".alert-success"))
        )
        success_message = self.driver.find_element(By.CSS_SELECTOR, ".alert-success")
        assert "¡Foro eliminado con éxito!" in success_message.text
        
            
        
        
    except Exception as e:
        pytest.fail(f"Test falló con excepción: {e}")
 
 
  def test_editar_foro(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1031)
    self.driver.find_element(By.LINK_TEXT, "Foro").click()
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(2) > td > .btn").click()
    
    original_name = "foro cambiado"
    unique_name = f"{original_name} {self.generate_unique_suffix()}"
    
    # Actualizar el nombre del foro
    name_field = self.driver.find_element(By.ID, "name")
    name_field.clear()
    name_field.send_keys(unique_name)
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
    
    WebDriverWait(self.driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, ".alert-success"))
    )
    success_message = self.driver.find_element(By.CSS_SELECTOR, ".alert-success")
    assert "¡Foro actualizado con éxito!" in success_message.text
        
      
      
  ############################## TESTS FORO CATEGORÍA ##############################
  
  def test_agregar_categoria(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1031)
    self.driver.find_element(By.LINK_TEXT, "Foro").click()
    self.driver.find_element(By.LINK_TEXT, "Agregar Categoría").click()
    
    unique_name = f"categoría nueva {self.generate_unique_suffix()}"
    
    # Llenar el formulario
    self.driver.find_element(By.ID, "name").click()
    self.driver.find_element(By.ID, "name").send_keys(unique_name)
    self.driver.find_element(By.ID, "description").click()
    self.driver.find_element(By.ID, "description").send_keys("Descripción de la nueva categoría")
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
    
    WebDriverWait(self.driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, ".alert-success"))
    )
    success_message = self.driver.find_element(By.CSS_SELECTOR, ".alert-success")
    assert "¡Categoría agregada con éxito!" in success_message.text
  
  def test_borrar_categoria(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/?data=root&sort_param=stored")
    self.driver.set_window_size(974, 1031)
    self.driver.find_element(By.LINK_TEXT, "Foro").click()

    try:
        self.driver.find_element(By.LINK_TEXT, "Borrar Categoría").click()
        delete_button = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "tr:nth-child(3) .btn"))
        )
        delete_button.click()
        
        WebDriverWait(self.driver, 10).until(EC.alert_is_present())
        alert = self.driver.switch_to.alert
        alert.accept()
        
        WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".alert-success"))
        )
        success_message = self.driver.find_element(By.CSS_SELECTOR, ".alert-success")
        assert "¡Categoría eliminada con éxito!" in success_message.text
    
    except Exception as e:
        pytest.fail(f"Test falló con excepción: {e}")
        
        
        
  ############################## TESTS FORO HILO ##############################
  
  def test_agregar_hilo(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1031)
    self.driver.find_element(By.LINK_TEXT, "Foro").click()
    
    self.driver.find_element(By.CSS_SELECTOR, ".table tbody tr:nth-child(2) a").click()
    self.driver.find_element(By.LINK_TEXT, "Agregar Hilo").click()
    self.driver.find_element(By.ID, "title").click()
    self.driver.find_element(By.ID, "title").send_keys("hilo prueba")
    self.driver.find_element(By.ID, "content").click()
    self.driver.find_element(By.ID, "content").send_keys("hola")
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
  
    WebDriverWait(self.driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, ".alert-success"))
    )
    success_message = self.driver.find_element(By.CSS_SELECTOR, ".alert-success")
    assert "¡Hilo y comentario añadidos con éxito!" in success_message.text

  def test_borrar_hilo(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1031)
    self.driver.find_element(By.LINK_TEXT, "Foro").click()
    
    WebDriverWait(self.driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "table"))
    )
    
    try:
        self.driver.find_element(By.CSS_SELECTOR, ".table tbody tr:nth-child(2) a").click()

        # Verificar si hay al menos 1 hilo
        rows = self.driver.find_elements(By.CSS_SELECTOR, "tr")
        if len(rows) < 1:
            pytest.skip("No hay suficientes hilos para borrar.")
            
        delete_button = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) form > .btn")
        delete_button.click()
        
        WebDriverWait(self.driver, 10).until(EC.alert_is_present())
        alert = self.driver.switch_to.alert
        alert.accept()
        
        WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".alert-success"))
        )
        success_message = self.driver.find_element(By.CSS_SELECTOR, ".alert-success")
        assert "¡El hilo y sus comentarios han sido eliminados con éxito!" in success_message.text
        
    except Exception as e:
        pytest.fail(f"Test falló con excepción: {e}")

        
        
  ############################## TESTS FORO COMENTARIO ##############################
  
  def test_agregar_comentario(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1031)
    self.driver.find_element(By.LINK_TEXT, "Foro").click()
    
    self.driver.find_element(By.CSS_SELECTOR, ".table tbody tr:nth-child(2) a").click()
    self.driver.find_element(By.CSS_SELECTOR, ".table tbody tr:nth-child(1) a").click()
    
    # Verificar si hay al menos 1 comentario
    comments = self.driver.find_elements(By.CSS_SELECTOR, ".post-box")
    if len(comments) < 1:
        pytest.skip("No hay suficientes comentarios para responder.")
    self.driver.find_element(By.LINK_TEXT, "Responder").click()
    self.driver.find_element(By.ID, "content").click()
    self.driver.find_element(By.ID, "content").send_keys("hola")
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
  
    WebDriverWait(self.driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, ".alert-success"))
    )
    success_message = self.driver.find_element(By.CSS_SELECTOR, ".alert-success")
    assert "¡Post agregado con éxito!" in success_message.text

  def test_borrar_comentario(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1031)
    self.driver.find_element(By.LINK_TEXT, "Foro").click()
    
    WebDriverWait(self.driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, ".table tbody"))
    )
    
    try:
        self.driver.find_element(By.CSS_SELECTOR, ".table tbody tr:nth-child(2) a").click()
        # Verificar si hay al menos 1 hilo
        WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".table tbody"))
        )
        rows = self.driver.find_elements(By.CSS_SELECTOR, "tr")
        if len(rows) < 1:
            pytest.skip("No hay suficientes hilos.")
        self.driver.find_element(By.CSS_SELECTOR, ".table tbody tr:nth-child(1) a").click()
        
        WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".post-box"))
        )
        
        # Verificar si hay al menos 1 comentario
        comments = self.driver.find_elements(By.CSS_SELECTOR, ".post-box")
        if len(comments) < 1:
            pytest.skip("No hay suficientes comentarios para borrar.")
        
        delete_button = self.driver.find_element(By.CSS_SELECTOR, ".post-box:nth-child(1) .btn")
        delete_button.click()
        
        WebDriverWait(self.driver, 10).until(EC.alert_is_present())
        alert = self.driver.switch_to.alert
        alert.accept()
        
        WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".alert-success"))
        )
        success_message = self.driver.find_element(By.CSS_SELECTOR, ".alert-success")
        assert "¡Comentario eliminado con éxito!" in success_message.text
        
    except Exception as e:
        pytest.fail(f"Test falló con excepción: {e}")
        
        
        
  ############################## TESTS RED SOCIAL SEGUIDOS Y SEGUIDORES ##############################

  def test_buscar_usuario(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.CSS_SELECTOR, "#top_user > .glyphicon").click()
    self.driver.find_element(By.LINK_TEXT, "Buscar usuarios").click()
    self.driver.find_element(By.NAME, "q").click()
    self.driver.find_element(By.NAME, "q").send_keys("lucia")
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
    
    assert self.driver.find_element(By.LINK_TEXT, "lucia").is_displayed()
  
  def test_dejar_de_seguir(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.CSS_SELECTOR, "#top_user > .glyphicon").click()
    self.driver.find_element(By.LINK_TEXT, "Ir al perfil").click()
    self.driver.find_element(By.LINK_TEXT, "Seguidos").click()
    
    WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, ".mb-4:nth-child(2) .btn"))
    ).click()
    time.sleep(1)
  
    usuarios_seguidos = self.driver.find_elements(By.LINK_TEXT, "lucia")
    assert len(usuarios_seguidos) == 0, "El usuario 'lucia' sigue apareciendo en la lista de seguidos."
  
  def test_seguir(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "top_user").click()
    self.driver.find_element(By.LINK_TEXT, "Buscar usuarios").click()
    self.driver.find_element(By.NAME, "q").click()
    self.driver.find_element(By.NAME, "q").send_keys("lucia")
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
    WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.LINK_TEXT, "lucia"))
    ).click()
    
    WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, ".btn-primary"))
    ).click()
  
    assert self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").text == "Dejar de seguir"
  
  def test_ver_seguidores(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.CSS_SELECTOR, "#top_user > .glyphicon").click()
    self.driver.find_element(By.LINK_TEXT, "Ir al perfil").click()
    self.driver.find_element(By.LINK_TEXT, "Seguidores").click()
    try:
        texto_seguidores = self.driver.find_element(By.XPATH, "//*[contains(text(), 'Usuarios que te siguen')]")
        assert texto_seguidores.is_displayed()
    except Exception as e:
        print(f"Error: {e}")
        raise Exception("El texto 'Usuarios que te siguen' no se encuentra en la página de seguidores.")
      
  def test_ver_seguidos(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.CSS_SELECTOR, "#top_user > .glyphicon").click()
    self.driver.find_element(By.LINK_TEXT, "Ir al perfil").click()
    self.driver.find_element(By.LINK_TEXT, "Seguidos").click()
    try:
        texto_seguidos = self.driver.find_element(By.XPATH, "//*[contains(text(), 'Usuarios que sigues')]")
        assert texto_seguidos.is_displayed()
    except Exception as e:
        print(f"Error: {e}")
        raise Exception("El texto 'Usuarios que sigues' no se encuentra en la página de seguidos.")
      
  
  ############################## TESTS RED SOCIAL MENSAJES ##############################
  
  def test_mandar_mensaje(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.CSS_SELECTOR, "#top_user > .glyphicon").click()
    self.driver.find_element(By.LINK_TEXT, "Ir al perfil").click()
    self.driver.find_element(By.LINK_TEXT, "Seguidos").click()
    self.driver.find_element(By.LINK_TEXT, "lucia").click()
    self.driver.find_element(By.LINK_TEXT, "Abrir Chat").click()
    
    self.driver.find_element(By.NAME, "content").click()
    self.driver.find_element(By.NAME, "content").send_keys("hola")
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
    try:
        WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".message"))
        )
        messages = self.driver.find_elements(By.CSS_SELECTOR, ".message")
        assert len(messages) > 0, "No se encontraron mensajes en el chat."
    except Exception as e:
        pytest.fail(f"Test falló con excepción: {e}")
  
  
  def test_mandar_y_borrar_mensaje(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.CSS_SELECTOR, "#top_user > .glyphicon").click()
    self.driver.find_element(By.LINK_TEXT, "Ir al perfil").click()
    self.driver.find_element(By.LINK_TEXT, "Seguidos").click()
    self.driver.find_element(By.LINK_TEXT, "lucia").click()
    self.driver.find_element(By.LINK_TEXT, "Abrir Chat").click()
    
    self.driver.find_element(By.NAME, "content").click()
    self.driver.find_element(By.NAME, "content").send_keys("hola")
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
    
    try:
        WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".message"))
        )
        messages = self.driver.find_elements(By.CSS_SELECTOR, ".message")
        
        if len(messages) == 0:
            pytest.fail("No se encontraron mensajes en el chat.")
        
        # Borrar el mensaje
        last_message = messages[-1]
        delete_button = last_message.find_element(By.CSS_SELECTOR, ".delete-button")
        delete_button.click()
        
        WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".alert-success"))
        )
        success_message = self.driver.find_element(By.CSS_SELECTOR, ".alert-success")
        assert "Mensaje eliminado." in success_message.text
    except Exception as e:
        pytest.fail(f"Test falló con excepción: {e}")

  
  
  ############################## TESTS RED SOCIAL NOTIFICACIONES ##############################
  
  def test_notificacion_ver_mensaje(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.CSS_SELECTOR, ".glyphicon-bell").click()
    self.driver.find_element(By.LINK_TEXT, "Ver mensaje").click()
  
    assert "Chat con lucia" in self.driver.page_source, "No se encontró el texto 'Chat con lucia' en la página."
    
  def test_notificacion_ver_perfil(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.CSS_SELECTOR, ".glyphicon-bell").click()
    self.driver.find_element(By.LINK_TEXT, "Ver perfil").click()
    assert "Perfil de lucia" in self.driver.page_source, "No se encontró el texto 'Perfil de lucia' en la página."

  def test_notificacion_ver_post(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.CSS_SELECTOR, ".glyphicon-bell").click()
    self.driver.find_element(By.LINK_TEXT, "Ver post").click()
  
    # Assert
    posts = self.driver.find_elements(By.CSS_SELECTOR, ".post-box")
    found = any("lucia" in post.text for post in posts)
    assert found, "No se encontró el texto 'lucia' en ningún mensaje."
    
  def test_borrar_una_notificacion(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.CSS_SELECTOR, ".glyphicon-bell").click()
    
    notifications = self.driver.find_elements(By.CSS_SELECTOR, ".list-group-item")
    if len(notifications) == 0:
      pytest.skip("No quedan notificaciones para borrar.")
    
    self.driver.find_element(By.CSS_SELECTOR, ".list-group-item:nth-child(1) > form > .btn").click()
    try:
        WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".alert-success"))
        )
        success_message = self.driver.find_element(By.CSS_SELECTOR, ".alert-success")
        assert "Notificación eliminada" in success_message.text, "No se encontró el mensaje de éxito 'Notificación eliminada'."
    except Exception as e:
        pytest.fail(f"Test falló con excepción: {e}")
  
  def test_borrar_notificaciones(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.CSS_SELECTOR, ".glyphicon-bell").click()

    # Comprobar si hay notificaciones
    notifications_present = len(self.driver.find_elements(By.CSS_SELECTOR, ".list-group-item")) > 0
    
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
    alert = self.driver.switch_to.alert
    if alert.text == "¿Estás seguro de que quieres eliminar todas las notificaciones?":
      alert.accept()
    else:
      raise ValueError("Texto de alerta inesperado.")

    if notifications_present:
        WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".alert-success"))
        )
        success_message = self.driver.find_element(By.CSS_SELECTOR, ".alert-success").text
        assert success_message == "Todas las notificaciones han sido eliminadas."
    else:
        WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".alert-danger"))
        )
        error_message = self.driver.find_element(By.CSS_SELECTOR, ".alert-danger").text
        assert error_message == "No hay notificaciones para eliminar."
        
        
        
  ############################## TESTS AUDIOLIBRO ##############################
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_escuchar_y_parar_libro(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1040)
    
    # Buscar libro "El gran Gatsby"
    self.driver.find_element(By.XPATH, "//img[@alt=\'El gran Gatsby\']").click()
    element = self.driver.find_element(By.XPATH, "//img[@alt=\'El gran Gatsby\']")
    
    # Mover el cursor al libro "El gran Gatsby"
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    
    # Mover el cursor al cuerpo de la página
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).move_by_offset(0, 0).perform()
    time.sleep(1)
    self.vars["window_handles"] = self.driver.window_handles
    
    # Abrir nueva ventana para el lector digital
    self.driver.find_element(By.ID, "readbtn").click()
    self.vars["win5834"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars["win5834"])
    self.driver.find_element(By.ID, "next").click()
    
    # Escuchar y parar audio
    self.driver.find_element(By.ID, "play-button").click()
    time.sleep(2)
    self.driver.find_element(By.ID, "pause-button").click()
    time.sleep(1)
    
    play_button = self.driver.find_element(By.ID, "play-button")
    assert play_button.is_displayed(), "El botón de reproducción no responde correctamente."
  
  
  def test_avanzar_audio(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1040)
    
    # Buscar libro "El gran Gatsby"
    self.driver.find_element(By.XPATH, "//img[@alt=\'El gran Gatsby\']").click()
    element = self.driver.find_element(By.XPATH, "//img[@alt=\'El gran Gatsby\']")
    
    # Mover el cursor al libro "El gran Gatsby"
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    
    # Mover el cursor al cuerpo de la página
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).move_by_offset(0, 0).perform()
    time.sleep(1)
    self.vars["window_handles"] = self.driver.window_handles
    
    # Abrir nueva ventana para el lector digital
    self.driver.find_element(By.ID, "readbtn").click()
    self.vars["win5834"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars["win5834"])
    self.driver.find_element(By.ID, "next").click()
    
    # Reproducir audio
    self.driver.find_element(By.ID, "play-button").click()
    progress_bar = self.driver.find_element(By.ID, "progress-bar")
    initial_position = progress_bar.get_attribute("value")
    # Avanzar el progreso en la barra
    self.driver.find_element(By.ID, "progress-bar").send_keys("17")
    self.driver.find_element(By.ID, "progress-bar").click()
    # Continuar reproduciendo tras avanzar el progreso
    self.driver.find_element(By.ID, "play-button").click()
    time.sleep(1)
    final_position = progress_bar.get_attribute("value")
    assert initial_position != final_position, "La barra de progreso no ha cambiado de posición."
    
  
  def test_cambiar_capitulo(self):
    self.driver.get("http://localhost:8083/login?next=%2F")
    self.driver.set_window_size(974, 1040)
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("admin")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("admin123")
    self.driver.find_element(By.NAME, "submit").click()
    
    self.driver.get("http://localhost:8083/")
    self.driver.set_window_size(974, 1040)
    
    # Buscar libro "El gran Gatsby"
    self.driver.find_element(By.XPATH, "//img[@alt=\'El gran Gatsby\']").click()
    element = self.driver.find_element(By.XPATH, "//img[@alt=\'El gran Gatsby\']")
    
    # Mover el cursor al libro "El gran Gatsby"
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    
    # Mover el cursor al cuerpo de la página
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).move_by_offset(0, 0).perform()
    time.sleep(1)
    self.vars["window_handles"] = self.driver.window_handles
    
    # Abrir nueva ventana para el lector digital
    self.driver.find_element(By.ID, "readbtn").click()
    self.vars["win684"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars["win684"])
    self.driver.find_element(By.ID, "next").click()
    
    # Obtener duración total del primer capítulo
    self.driver.find_element(By.ID, "play-button").click()
    time.sleep(1)
    total_time_chapter_1 = self.driver.find_element(By.ID, "total-time").text
    self.driver.find_element(By.ID, "pause-button").click()
    
    self.driver.find_element(By.ID, "next").click()
    self.driver.find_element(By.ID, "next").click()
    self.driver.find_element(By.ID, "next").click()
    self.driver.find_element(By.ID, "next").click()
    self.driver.find_element(By.ID, "next").click()
    self.driver.find_element(By.ID, "next").click()
    
    # Obtener duración total del siguiente capítulo
    self.driver.find_element(By.ID, "play-button").click()
    time.sleep(1)
    total_time_chapter_2 = self.driver.find_element(By.ID, "total-time").text
    time.sleep(1)
    self.driver.find_element(By.ID, "pause-button").click()
    time.sleep(1)
    assert total_time_chapter_1 != total_time_chapter_2, "El tiempo total no se ha recalculado al cambiar de capítulo."